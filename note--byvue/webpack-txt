1.npm install webpack -g
2.根目录新建一个webpack.config.js文件
3.var path = require('path')

module.exports = {
  entry: {
    App: './js/App.js'
  },
  output: {
    path: path.resolve(_dirname, "./dist"),
    filename: "scripts.js"
  }
}


下面是webpack2 基本配置实例
//打包的文件对象bundle.js
let option = {
  entry: ‘.／index.js’,     // 来指定一个入口起点（或多个入口起点），是打包的开始文件
  output: {                      // 告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。
    path: path.resolve('./web'),  // 输出的文件路径
    filename: 'build/js/[name].bundle.js',   // 打包后的文件名称，此时的名称是入口文件的名称
  },
  module: {
    rules: [{
        test: /\.vue$/,       //识别出应该被对应的 loader 进行转换的 vue 文件。
        loader: 'vue-loader',  //转换 vue 文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）
      },
      {
        test: /\.js$/,
        loader: 'babel-loader',
        exclude: /node_modules/,    // 排除 node_modules ,不转译 node_modules 文件夹
        options: {
          presets: ['es2015'],
          cacheDirectory: true  //将 babel-loader 提速至少两倍。 这会将转译的结果缓存到文件系统中。loader 将使用默认的缓存目录 node_modules/.cache/babel-loader
        }
      },
      {
        test: /\.css$/,
        loader: 'style-loader!css-loader'  //链式loaders ,可将相关正则匹配到的文件资源数据在几个loader之间进行共享传递
      },
      {
        test: /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/,
        loader: 'file-loader',
        options: {
          name: '[name].[ext]?[hash]',
          outputPath: 'build/img/'
        }
      },
      {
        test: /\.(png|jpg|gif|svg|jpeg)$/,
        loader: 'file-loader?name=build/img/[name].[hash:6].[ext]' // 将图片命名为 基本名称 + 哈希值 + 扩展名 格式并指定到 build/img 目录下
      }
    ]
  },
  resolve: {   //设置模块如何被解析
    extensions: ['.js', '.vue', '.css'],   //自动解析确定的扩展,能够使用户在引入模块时不带扩展名
    alias: {    // 设置模块别名,便于我们更方便通过import 或 require 引用
      'vue': 'vue/dist/vue.js'
    }
   },
    plugins: [   // webpack 插件列表
      new HtmlWebpackPlugin({template: './src/index.html'})
 ]
}
 module.exports = option
